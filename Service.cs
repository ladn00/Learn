//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Learndb
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Media;
    using System.IO;

    public partial class Service
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Service()
        {
            this.ClientService = new HashSet<ClientService>();
            this.ServicePhoto = new HashSet<ServicePhoto>();
        }
    
        public int ID { get; set; }
        public string Title { get; set; }
        public decimal Cost { get; set; }
        public int DurationInSeconds { get; set; }
        public string Description { get; set; }
        public Nullable<double> Discount { get; set; }
        public string MainImagePath { get; set; }

        public string NewPath
        {
            get
            {
                if(MainImagePath[0] == ' ')
                return MainImagePath.Substring(1);
                return MainImagePath;
            }
        }
        public string FullPath
        {
            get
            {
                //если у вас верный изначальный путь, а не как у меня, то вместо NewPath пишите MainImagePath
                return Path.GetFullPath(NewPath);
            }
        }
        public string DefaultDuration { 
            get 
            { 
                return $" {TimeSpan.FromSeconds(DurationInSeconds).Hours} час. {TimeSpan.FromSeconds(DurationInSeconds).Minutes} мин."; 
            } 
        }

        public decimal ActualCost { 
            get 
            { 
                return Math.Round(Cost * (1 - (decimal)Discount), 2); 
            } 
        }

        public SolidColorBrush DiscountColor
        {
            get
            {
                if (Discount > 0.1)
                    return Brushes.Cornsilk;
                else return Brushes.MintCream;
            }
        }
        public string NewDiscount
        {
            get
            {
                if(Discount == 0)
                {
                    return "";
                }
                else
                {
                    return $"*{Discount:P} Скидка";
                }
            }
        }
        public string StrikedDiscount
        {
            get
            {
                if(Discount == 0)
                {
                    return "";
                }
                else
                {
                    return $"{Cost:F2}";
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ClientService> ClientService { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ServicePhoto> ServicePhoto { get; set; }
    }
}
